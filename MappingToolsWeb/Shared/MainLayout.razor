@inherits LayoutComponentBase

@using MappingToolsWeb.Shared.Components.FileSystem

@inject ILocalStorageService LocalStorage

<MudThemeProvider Theme="@currentTheme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudLink Href="/" Typo="Typo.h5" Class="mr-16" Color="Color.Inherit" Underline="Underline.None">Mapping Tools Web</MudLink>
        <MudLink Href="https://misakura-rin.github.io/mapping-tools-web-docs/" Typo="Typo.subtitle1" Underline="Underline.None" Color="Color.Inherit" Class="mr-10">Documentation</MudLink>
        <MudLink Href="changelog/" Typo="Typo.subtitle1" Color="Color.Inherit" Underline="Underline.None" Class="mr-10">Changelog</MudLink>
        <MudAppBarSpacer />
        <MudIconButton Color="Color.Inherit" Target="_Blank" Class="ma-0" Icon="fab fa-discord" Link="https://discord.gg/YfjKN2yjQV" />
        <MudIconButton Color="Color.Inherit" Target="_Blank" Class="ma-0" Icon="@Icons.Custom.Brands.GitHub" Link="https://github.com/misakura-rin/mapping-tools-web" />
        <MudIconButton Class="ma-0" Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.End" OnClick="FilesToggleOpen" />
    </MudAppBar>
    <MudDrawer Variant="DrawerVariant.Persistent" Open="true" Elevation="2" Class="pa-3">
        <a href="" class="mud-drawer-header" style="padding: 0;">
            <img width="100px" height="100px" src="icons/mt_logo.svg" style="margin-left: auto; margin-right: auto;" />
        </a>
        <div class="d-flex mb-4" style="justify-content: center;">
            <MudToggleIconButton 
                Class="ma-0"
                Color="Color.Primary"
                ToggledColor="Color.Inherit"
                Edge="Edge.Start"
                Toggled="@isLightTheme" 
                ToggledChanged="ToggleTheme" 
                Icon="@Icons.Material.Filled.NightlightRound"
                ToggledIcon="@Icons.Material.Outlined.WbSunny">
            </MudToggleIconButton>
            <MudIconButton Color="Color.Primary" Class="ma-0" Icon="@Icons.Filled.Translate" OnClick="OnLanguageClicked"></MudIconButton>
            <MudIconButton Color="Color.Primary" Class="ma-0" Icon="@Icons.Filled.Settings" Link="settings/"></MudIconButton>
        </div>
        <ToolMenu />
    </MudDrawer>
    <MudDrawer @bind-Open="filesOpen" Elevation="2" Anchor="Anchor.Right" ClipMode="DrawerClipMode.Always" Class="pa-3">
        <FileSystem />
    </MudDrawer>
    <MudMainContent>
        <MudContainer Class="py-10">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<MudMessageBox @ref="languageMessage" Title="Change language" >
    <MessageContent>
        <LanguageSelector />
    </MessageContent>
</MudMessageBox>

@code {
    enum Theme {
        Dark,
        Light
    }

    MudMessageBox languageMessage;

    bool toolsOpen = true;
    bool filesOpen = true;

    bool isLightTheme;

    MudTheme currentTheme;

    MudTheme darkTheme = new MudTheme {
        Palette = new Palette {
            Black = "#27272f",
            Background = "#32333d",
            BackgroundGrey = "#27272f",
            Surface = "#373740",
            DrawerBackground = "#27272f",
            DrawerText = "rgba(255,255,255, 0.50)",
            DrawerIcon = "rgba(255,255,255, 0.50)",
            AppbarBackground = "#27272f",
            AppbarText = "rgba(255,255,255, 0.70)",
            TextPrimary = "rgba(255,255,255, 0.70)",
            TextSecondary = "rgba(255,255,255, 0.50)",
            ActionDefault = "#adadb1",
            ActionDisabled = "rgba(255,255,255, 0.26)",
            ActionDisabledBackground = "rgba(255,255,255, 0.12)"
        }
    };

    MudTheme lightTheme = new MudTheme {
        Palette = new Palette() {
            Black = "#272c34"
        }
    };

    protected override async Task OnInitializedAsync() {
        var theme = await LocalStorage.GetItemAsync<Theme>("theme");

        switch(theme) {
            case Theme.Dark:
                SetDarkTheme();
            break;
            case Theme.Light:
                SetLightTheme();
            break;
            default:
                SetDarkTheme();
            break;
        }
    }

    async Task ToggleTheme(bool _) {
        if(currentTheme == lightTheme) {
            SetDarkTheme();
            await LocalStorage.SetItemAsync<Theme>("theme", Theme.Dark);
        }
        else {
            SetLightTheme();
            await LocalStorage.SetItemAsync<Theme>("theme", Theme.Light);
        }
    }

    void SetLightTheme() {
        currentTheme = lightTheme;
        isLightTheme = true;
    }

    void SetDarkTheme() {
        currentTheme = darkTheme;
        isLightTheme = false;
    }

    void ToolsToggleOpen() {
        toolsOpen = !toolsOpen;
    }

    void FilesToggleOpen() {
        filesOpen = !filesOpen;
    }

    async Task OnLanguageClicked() {
        await languageMessage.Show();
    }
}