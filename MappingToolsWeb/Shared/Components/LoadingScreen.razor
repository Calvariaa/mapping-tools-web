@using System.Globalization
@using TG.Blazor.IndexedDB
@using MappingToolsWeb.IndexedDB
@using MappingToolsWeb.IndexedDB.Records
@using MappingToolsWeb.IndexedDB.Records.Implementations

@inject ILocalStorageService LocalStorage
@inject NavigationManager NavManager
@inject IndexedDBManager IndexedDbMgr
@inject IIndexedDbCache<ContentTag, IOrderedFileRecords, IFileRecord> IndexedDbCache
@inject ILocalizer Localizer
@inject ILanguageContainerService LanguageService

@if (isLoaded)
{
    @ChildContent
}
else
{
    <div class="centered loading-container">
        <img style="width: 20vw; height: 20vh;" class="spinning-logo" src="icons/mt_logo.svg" />
    </div>
}

@code {
    protected bool isLoaded {get; set;}

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if(!IndexedDbCache.IsInitialized) {
            var files = await IndexedDbMgr.GetRecords<FileRecord>("files");
            IndexedDbCache.Initialize(files);
        }

        var lang = await LocalStorage.GetItemAsync<string>("language");

        if(!string.IsNullOrWhiteSpace(lang)) {
            var culture = CultureInfo.CreateSpecificCulture(lang);

            if(Localizer.SupportedCultures.Contains(culture)) {
                LanguageService.SetLanguage(culture);
            }
        }
        
        isLoaded = true;
    }
}
