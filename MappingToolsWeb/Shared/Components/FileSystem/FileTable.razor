@using TG.Blazor.IndexedDB

@inject IndexedDBManager IndexedDbMgr
@inject IContentTagManager IContentTagManager
@inject IIndexedDbCache<ContentTag, IOrderedFileRecords, IFileRecord> IndexedDbCache

<div class="@ContainerClass">
    @if(Files.Count > 0) {
        <MudList Clickable="false" Dense="true">
            <MudListItem Icon="@Icon" Text="@Name" InitiallyExpanded="false">
                <NestedList>
                    @foreach(var file in Files) {
                        <MudListItem>@file.Name</MudListItem>
                    }
                </NestedList>
            </MudListItem>
        </MudList>
    }
</div>

<MudProgressLinear Class="@ProgressBarClass" Color="Color.Secondary" Indeterminate="true" />

@code {
    [Parameter]
    public string Name { get; set; } = "NOT SET";

    [Parameter]
    public ContentTag Tag { get; set; } = ContentTag.Undefined;

    [Parameter]
    public long MaxFileSize { get; set; } = 1024000000;

    [Parameter]
    public string Icon { get; set; }

    List<IFileRecord> Files { get; set; } = new List<IFileRecord>();

    string ProgressBarClass = "d-none file-table-loader my-7";

    string ContainerClass = "";

    protected override void OnInitialized()
    {
        IndexedDbCache.CacheHasChanged += OnCacheChanged;

        if(IndexedDbCache.Cache.ContainsKey(Tag)) {
            var cached = IndexedDbCache.Cache.GetValueOrDefault(Tag);

            Files = cached.OrderedRecords;
        }
    }

    public async Task AddFileAsync(IBrowserFile file)
    {
        ProgressBarClass = "file-table-loader my-7";
        ContainerClass = "d-none";

        await InvokeAsync(StateHasChanged);

        var fileRecord = await ConvertFileToFileRecordAsync(file);

        await IndexedDbMgr.AddRecord(new StoreRecord<IFileRecord> {
            Storename = "files",
            Data = fileRecord
        });

        IndexedDbCache.Add(fileRecord);
    }

    private async Task<IFileRecord> ConvertFileToFileRecordAsync(IBrowserFile file) {
        using var fileStream = file.OpenReadStream(MaxFileSize);

        var buffer = new byte[fileStream.Length];

        await fileStream.ReadAsync(buffer);

        return new FileRecord {
            Name = file.Name,
            Tag = Tag,
            LastModified = DateTime.Now,
            Data = buffer
        };
    }

    private void OnCacheChanged(object sender, EventArgs e) {
        if(IndexedDbCache.Cache.ContainsKey(Tag)) {
            var cached = IndexedDbCache.Cache.GetValueOrDefault(Tag);

            Files = cached.OrderedRecords;
        }
        else {
            Files.Clear();
        }

        ProgressBarClass = "d-none file-table-loader my-7";
        ContainerClass = "";

        StateHasChanged();
    }
}
