<div class="@ContainerClass">
    @if(Files.Count > 0) {
        <MudList Class="file-table-list" Clickable="true" Dense="true">
            <MudListItem Icon="@Icon" Text="@Name" InitiallyExpanded="IsExpanded">
                <NestedList>
                    @foreach(var file in Files) {
                        <MudListItem Style="cursor: default;">
                            <div class="d-flex">
                                <MudText Class="mr-auto" title="@file.Name" Style="user-select: none; line-height: 36px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@file.Name</MudText>
                                <MudIconButton Size="Size.Small" Class="ml-2 pa-2" Color="Color.Secondary" OnClick="() => OpenEdit(file)" Icon="@Icons.Filled.Edit"></MudIconButton> 
                            </div>
                        </MudListItem>
                    }
                </NestedList>
            </MudListItem>
        </MudList>
    }
</div>

<MudProgressLinear Class="@ProgressBarClass" Color="Color.Primary" Indeterminate="true" />

<MudDialog @bind-IsVisible="editVisible" DisableSidePadding="true">
    <TitleContent>
        <MudText Typo="Typo.h5" Class="mr-12">Edit file</MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="max-height: 600px; min-width: 400px; overflow-y: scroll">
            <FileEdit @ref="fileEdit" OnEditApplied="OnEditApplied" File="@fileToEdit" />
        </MudContainer>
    </DialogContent>
</MudDialog>

@code {
    [Inject] INestedIndexedDbCache<ContentTag, IOrderedRecords<IFileRecord>, IFileRecord> fileCache { get; set; }
    [Inject] ILanguageContainerService i18n { get; set; }

    [Parameter] public bool IsExpanded { get; set;  }
    [Parameter] public string Name { get; set; }
    [Parameter] public ContentTag Tag { get; set; } = ContentTag.Undefined;
    [Parameter] public string Icon { get; set; }

    bool editVisible;
    IFileRecord fileToEdit;
    FileEdit fileEdit;
    List<IFileRecord> Files { get; set; } = new List<IFileRecord>();
    string ProgressBarClass = "d-none file-upload-progressbar my-7";
    string ContainerClass = "";

    protected override void OnInitialized()
    {
        i18n.InitLocalizedComponent(this);

        fileCache.CacheHasChanged += OnCacheChanged;

        if(fileCache.TryGetValue(Tag, out var cached)) {
            Files = cached.OrderedRecords;
        }
    }

   public void RefreshData() {
        ProgressBarClass = "file-upload-progressbar my-7";
        ContainerClass = "d-none";

        StateHasChanged();

        if(fileCache.TryGetValue(Tag, out var cached)) {
            Files = cached.OrderedRecords;
        }
        else {
            Files.Clear();
        }

        ProgressBarClass = "d-none file-upload-progressbar my-7";
        ContainerClass = "";

        StateHasChanged();
    }

    void OnCacheChanged(object sender, EventArgs e) {
        RefreshData();
    }

    void OnEditApplied(object sender, EventArgs e) {
        editVisible = false;
        
        StateHasChanged();
    }

    void OpenEdit(IFileRecord file) {
        fileToEdit = file;
        editVisible = true;
    }
}
