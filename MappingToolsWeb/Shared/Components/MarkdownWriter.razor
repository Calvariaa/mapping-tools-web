@if(isError) {
    <MudText Typo="Typo.subtitle1">@i18n["standaloneComponents_markdownWriter_noDocsFound"]</MudText>
}
else {
    <div>@content</div>
}

@code {
    [Inject] HttpClient http { get; set; }
    [Inject] ILanguageContainerService i18n { get; set; }    

    [Parameter] public string Path {get; set;}

    MarkupString content;
    bool isError;

    protected override async Task OnInitializedAsync() {
        i18n.InitLocalizedComponent(this);

        await InitMarkdown();
    }

    async Task InitMarkdown() {
        if(string.IsNullOrWhiteSpace(Path)) {
            isError = true;
            return;
        }

        try {
            var doc = await http.GetStringAsync(Path);
            
            if(!TryGenerateHtml(doc, out var markup)) {
                Console.WriteLine("markdown process error");
                isError = true;
                return;
            }

            content = markup;
        }
        catch( Exception ) {
            isError = true;
        }
    }

    bool TryGenerateHtml(string s, out MarkupString markup) {
        markup = new MarkupString();

        try {
            markup = (MarkupString) Markdig.Markdown.ToHtml(s);
            return true;
        }
        catch(Exception) {
            return false;
        }
    }
}