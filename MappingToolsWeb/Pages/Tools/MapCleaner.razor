@page "/mapcleaner"

@using BlazorDownloadFile
@using MappingToolsWeb.Shared.Classes.Settings.Api
@using MappingToolsWeb.Shared.Components.Tools
@using MappingToolsWeb.Shared.Components.Tools.MapCleaner
@using Mapping_Tools_Core.BeatmapHelper.BeatDivisors
@using Mapping_Tools_Core.BeatmapHelper.IO.Decoding
@using Mapping_Tools_Core.BeatmapHelper.IO.Encoding
@using Mapping_Tools_Core.Exceptions
@using toolNamespace = Mapping_Tools_Core.Tools.MapCleanerStuff
@using System.Text
@using TG.Blazor.IndexedDB

<ToolBase Name="Map Cleaner" DocsPath="@($"docs/{ i18n.CurrentCulture.Name }/map_cleaner.md")">
    <Settings>
        <MapCleanerSettings />
    </Settings>

    <Content>
        <MudText Typo="Typo.subtitle1" Class="mt-8">@i18n["basic"]</MudText>

        <MudCheckBox @bind-Checked="@settings.ResnapObjects" Label="@i18n["tools_mapCleaner_resnapObjects"]" Color="Color.Secondary" Class="d-flex"></MudCheckBox>
        <MudCheckBox @bind-Checked="@settings.ResnapBookmarks" Label="@i18n["tools_mapCleaner_resnapBookmarks"]" Color="Color.Secondary" Class="d-flex"></MudCheckBox>
        <MudCheckBox @bind-Checked="@settings.RemoveMuting" Label="@i18n["tools_mapCleaner_removeMuting"]" Color="Color.Secondary" Class="d-flex"></MudCheckBox>
        <MudCheckBox @bind-Checked="@settings.RemoveUnclickables" Label="@i18n["tools_mapCleaner_removeUnclickables"]" Color="Color.Secondary" Class="d-flex"></MudCheckBox>

        <MudText Typo="Typo.subtitle1" Class="mt-4">@i18n["advanced"]</MudText>

        <MudCheckBox @bind-Checked="@settings.UsesVolumeChangesInSliders" Label="@i18n["tools_mapCleaner_usesVolumeChangesInSliders"]" Color="Color.Secondary" Class="d-flex"></MudCheckBox>
        <MudCheckBox @bind-Checked="@settings.UsesVolumeChangesInSpinners" Label="@i18n["tools_mapCleaner_usesVolumeChangesInSpinners"]" Color="Color.Secondary" Class="d-flex"></MudCheckBox>
        <MudCheckBox @bind-Checked="@settings.UsesSampleSetChanges" Label="@i18n["tools_mapCleaner_usesSampleSetChanges"]" Color="Color.Secondary" Class="d-flex"></MudCheckBox>

        <MudSelect ToStringFunc="@beatDivisorStringFunction" Class="mt-4" AdornmentColor="Color.Secondary" T="BeatDivisor" Label="@i18n["beatDivisors"]" HelperText="@i18n["tools_mapCleaner_beatDivisorHelpText"]" MultiSelection="true" @bind-SelectedValues="@settings.SelectedBeatDivisors">
            @foreach (var sig in BeatDivisor.AllDivisors) {
                <MudSelectItem Value="sig"></MudSelectItem>
            }
        </MudSelect>
    </Content>
    <ActionElement>
        <MudPaper Class="mt-16">
            <div class="d-flex ma-5">
                @if (beatmaps.Count > 0) {
                    <MudSelect AdornmentColor="Color.Secondary" T="IFileRecord" Label="Beatmaps" HelperText="@i18n["tools_shared_beatmapSelectHelpText"]" @bind-Value="selectedBeatmap">
                        @foreach (var map in beatmaps) {
                            <MudSelectItem Value="map">@map.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudButton EndIcon="@Icons.Material.Filled.DoubleArrow" Color="Color.Secondary" OnClick="RunTool" Size="Size.Large" Class="my-5 ml-5">Run</MudButton>
                }
                else {
                    <MudText Color="Color.Secondary" Typo="Typo.subtitle1">@i18n["tools_shared_noBeatmap"]</MudText>
                    selectedBeatmap = null;
                }
            </div>
            <MudProgressLinear Value="@cleanerProgress" Color="@progressColor" />
        </MudPaper>
    </ActionElement>
</ToolBase>

@code {
    [Inject] ILanguageContainerService i18n { get; set; }
    [Inject] INestedIndexedDbCache<ContentTag, IOrderedRecords<IFileRecord>, IFileRecord> fileCache { get; set; }
    [Inject] IMappingToolsSettingsService mtSettings { get; set; }
    [Inject] ISnackbar SnackBar { get; set; }
    [Inject] IndexedDBManager indexedDb { get; set; }
    [Inject] IBlazorDownloadFileService downloadService { get; set; }

    double cleanerProgress = 0;
    Color progressColor = Color.Primary;

    Func<BeatDivisor, string> beatDivisorStringFunction = (b) => b.DisplayName;

    public const string STORAGE_KEY = "settings.map_cleaner";
    MapCleanerSettingsModel settings = new MapCleanerSettingsModel();

    IFileRecord selectedBeatmap;
    List<IFileRecord> beatmaps = new List<IFileRecord>();

    protected override async Task OnInitializedAsync() {
        fileCache.CacheHasChanged += OnCacheChanged;

        i18n.InitLocalizedComponent(this);

        LoadBeatmaps();
        
        settings = await mtSettings.GetSettingsAsync<MapCleanerSettingsModel>(STORAGE_KEY);
    }

    async Task RunTool() {
        progressColor = Color.Primary;
        cleanerProgress = 0;

        StateHasChanged();

        if (selectedBeatmap?.Data == null) {
            SnackBar.Add(i18n["tools_shared_noBeatmapData"], Severity.Error);
            return;
        }

        if (settings.SelectedBeatDivisors.Count() < 1) {
            SnackBar.Add(i18n["tools_shared_noBeatDivisors"], Severity.Warning);
            return;
        }

        var data = Encoding.UTF8.GetString(selectedBeatmap.Data, 0, selectedBeatmap.Data.Length);

        if (string.IsNullOrWhiteSpace(data)) {
            SnackBar.Add(i18n["tools_shared_beatmapStringEncodeError"], Severity.Error);
            return;
        }

        await UpdateProgress(10);

        try {
            var beatmap = new OsuBeatmapDecoder().Decode(data);

            await UpdateProgress(20);

            var args = new toolNamespace.MapCleanerArgs(
                settings.UsesVolumeChangesInSliders,
                settings.UsesSampleSetChanges,
                settings.UsesVolumeChangesInSpinners,
                settings.ResnapObjects,
                settings.ResnapBookmarks,
                settings.RemoveMuting,
                settings.RemoveUnclickables,
                settings.SelectedBeatDivisors.Select(o => new RationalBeatDivisor(o.Numerator, o.Denominator))
            );

            var res = toolNamespace.MapCleaner.CleanMap(beatmap, args);

            await UpdateProgress(50);

            var encoded = new OsuBeatmapEncoder().Encode(beatmap);

            await UpdateProgress(60);

            await indexedDb.AddRecord(new StoreRecord<IBackupRecord> {
                Storename = "backups",
                Data = new BackupRecord
                {
                    File = selectedBeatmap as FileRecord, // !!!! workaround for shit language not being able to use interfaces smh
                    ToolName = "Map Cleaner",
                    BackedUpOn = DateTime.Now
                }
            });

            await UpdateProgress(70);

            var newFileRecord = new FileRecord {
                Id = selectedBeatmap.Id,
                Name = selectedBeatmap.Name,
                Tag = selectedBeatmap.Tag,
                Data = Encoding.UTF8.GetBytes(encoded),
                LastModified = DateTime.Now
            };

            await fileCache.ReplaceAsync(selectedBeatmap, newFileRecord);

           await  UpdateProgress(90);

            var snackBarString = "";
            snackBarString += "Successfully resnapped " + res.ObjectsResnapped + " objects\n";
            snackBarString += "and removed " + res.TimingPointsRemoved + " timing points!";

            SnackBar.Add(snackBarString, Severity.Success);

            var progress = new Progress<double>();

            progress.ProgressChanged += OnDownloadProgressChanged;

            await downloadService.DownloadFile(newFileRecord.Name, newFileRecord.Data, progress: progress);
        }
        catch (BeatmapParsingException) {
            SnackBar.Add(i18n["tools_shared_beatmapParseError"], Severity.Error);
        }
        catch (Exception e) {
            SnackBar.Add(e.Message + "\n" + e.StackTrace, Severity.Error);
        }
    }

    async void OnDownloadProgressChanged(object sender, double progress) {
        await UpdateProgress(100);
    }

    async Task UpdateProgress(double progress) {
        if (progress == 100) {
            progressColor = Color.Success;
            cleanerProgress = 100;

            StateHasChanged();

            await Task.Delay(3000);

            cleanerProgress = 0;
            progressColor = Color.Primary;
        }
        else {
            cleanerProgress = progress;
        }

        StateHasChanged();
    }

    void LoadBeatmaps() {
        if (fileCache.TryGetValue(ContentTag.OsuBeatmap, out var maps)) {
            beatmaps = maps.OrderedRecords;
        }
        else
        {
            beatmaps = new List<IFileRecord>();
        }
    }

    void OnCacheChanged(object sender, EventArgs e) {
        LoadBeatmaps();

        StateHasChanged();
    }
}