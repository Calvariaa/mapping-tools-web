@page "/mapcleaner"

@using MappingToolsWeb.Shared.Components.Tools
@using MappingToolsWeb.Shared.Components.Tools.MapCleaner

<ToolBase Name="Map Cleaner" DocsPath="@($"docs/{ i18n.CurrentCulture.Name }/map_cleaner.md")">
    <Settings>
        <MapCleanerSettings />
    </Settings>

    <Content>
        <MudText Typo="Typo.subtitle1" Class="mt-8">@i18n["basic"]</MudText>

        <MudCheckBox @bind-Checked="@resnapObjects" Label="@i18n["tools_mapCleaner_resnapObjects"]" Color="Color.Secondary" Class="d-flex"></MudCheckBox>
        <MudCheckBox @bind-Checked="@resnapBookmarks" Label="@i18n["tools_mapCleaner_resnapBookmarks"]" Color="Color.Secondary" Class="d-flex"></MudCheckBox>
        <MudCheckBox @bind-Checked="@removeUnusedSamples" Label="@i18n["tools_mapCleaner_removeUnusedSamples"]" Color="Color.Secondary" Class="d-flex"></MudCheckBox>
        <MudCheckBox @bind-Checked="@removeMuting" Label="@i18n["tools_mapCleaner_removeMuting"]" Color="Color.Secondary" Class="d-flex"></MudCheckBox>
        <MudCheckBox @bind-Checked="@removeUnclickables" Label="@i18n["tools_mapCleaner_removeUnclickables"]" Color="Color.Secondary" Class="d-flex"></MudCheckBox>

        <MudText Typo="Typo.subtitle1" Class="mt-4">@i18n["advanced"]</MudText>

        <MudCheckBox @bind-Checked="@usesVolumeChangesInSliders" Label="@i18n["tools_mapCleaner_usesVolumeChangesInSliders"]" Color="Color.Secondary" Class="d-flex"></MudCheckBox>
        <MudCheckBox @bind-Checked="@usesVolumeChangesInSpinners" Label="@i18n["tools_mapCleaner_usesVolumeChangesInSpinners"]" Color="Color.Secondary" Class="d-flex"></MudCheckBox>
        <MudCheckBox @bind-Checked="@usesSampleSetChanges" Label="@i18n["tools_mapCleaner_usesSampleSetChanges"]" Color="Color.Secondary" Class="d-flex"></MudCheckBox>

        <MudSelect Class="mt-4" AdornmentColor="Color.Secondary" T="string" Label="@i18n["signatures"]" HelperText="@i18n["tools_mapCleaner_signatureHelpText"]" MultiSelection="true" @bind-SelectedValues="selectedSignatures">
            @foreach(var sig in MapCleanerSettings.Signatures) {
                <MudSelectItem Value="sig">@sig</MudSelectItem>
            }
        </MudSelect>

        <MudPaper Class="mt-16">
            <div class="d-flex ma-5">
                @if(beatmaps.Count > 0) {
                    <MudSelect AdornmentColor="Color.Secondary" T="IFileRecord" Label="Beatmaps" HelperText="@i18n["tools_mapCleaner_signatureHelpText"]" @bind-Value="selectedBeatmap">
                        @foreach(var map in beatmaps) {
                            <MudSelectItem Value="map">@map.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudButton EndIcon="@Icons.Material.Filled.DoubleArrow" Color="Color.Secondary" OnClick="RunTool" Size="Size.Large" Class="my-5 ml-5">Run</MudButton>
                }
                else {
                    <MudText Color="Color.Secondary" Typo="Typo.subtitle1">@i18n["tools_shared_noBeatmap"]</MudText>
                }
            </div>
        </MudPaper>
    </Content>
</ToolBase>

@code {
    [Inject] ILanguageContainerService i18n { get; set; }
    [Inject] INestedIndexedDbCache<ContentTag, IOrderedRecords<IFileRecord>, IFileRecord> fileCache { get; set; }
    [Inject] IMappingToolsSettingsService mtSettings { get; set; }

    bool resnapObjects;
    bool resnapBookmarks;
    bool removeUnusedSamples;
    bool removeMuting;
    bool removeUnclickables;
    bool usesVolumeChangesInSliders;
    bool usesVolumeChangesInSpinners;
    bool usesSampleSetChanges;
    HashSet<string> selectedSignatures = new HashSet<string>();
    IFileRecord selectedBeatmap;
    List<IFileRecord> beatmaps = new List<IFileRecord>();

    protected override void OnInitialized() {
        fileCache.CacheHasChanged += OnCacheChanged;
        mtSettings.SettingsHaveChanged += OnSettingsChanged;

        i18n.InitLocalizedComponent(this);

        LoadBeatmaps();

        LoadDefaults();
    }

    void LoadDefaults() {
        resnapObjects = mtSettings.Settings.MapCleaner.ResnapObjects;
        resnapBookmarks = mtSettings.Settings.MapCleaner.ResnapBookmarks;
        removeUnusedSamples = mtSettings.Settings.MapCleaner.RemoveUnusedSamples;
        removeMuting = mtSettings.Settings.MapCleaner.RemoveMuting;
        removeUnclickables = mtSettings.Settings.MapCleaner.RemoveUnclickables;
        usesVolumeChangesInSliders = mtSettings.Settings.MapCleaner.UsesVolumeChangesInSliders;
        usesVolumeChangesInSpinners = mtSettings.Settings.MapCleaner.UsesVolumeChangesInSpinners;
        usesSampleSetChanges = mtSettings.Settings.MapCleaner.UsesSampleSetChanges;
        selectedSignatures = mtSettings.Settings.MapCleaner.SelectedSignatures;
    }

    async Task RunTool() {}

    void LoadBeatmaps() {
        if(fileCache.TryGetValue(ContentTag.OsuBeatmap, out var maps)) {
            beatmaps = maps.OrderedRecords;
        }
        else {
            beatmaps = new List<IFileRecord>();
        }
    }

    void OnCacheChanged(object sender, EventArgs e) {
        LoadBeatmaps();

        StateHasChanged();
    }

    void OnSettingsChanged(object sender, EventArgs e) {
        LoadDefaults();

        StateHasChanged();
    }
}
