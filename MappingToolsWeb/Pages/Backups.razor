@page "/backups"

@using TG.Blazor.IndexedDB
@using MappingToolsWeb.IndexedDB.Records
@using MappingToolsWeb.IndexedDB.Records.Implementations
@using BlazorDownloadFile

<MudTable Items="@backupList" Hover="true" Filter="new Func<IBackupRecord,bool>(FilterBackups)">
    <ToolBarContent>
        <MudText Typo="Typo.h5">@i18n["backups"]</MudText>
        <MudToolBarSpacer />
        <MudTextField T="string" @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<IBackupRecord, object>(o => o.File.Name)">File name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<IBackupRecord, object>(o => o.ToolName)">Tool used</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<IBackupRecord, object>(o => o.File.Tag)">Content type</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<IBackupRecord, object>(o => o.File.Data.Length)">Size</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<IBackupRecord, object>(o => o.BackedUpOn)">Backed up on</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="File name">@context.File.Name</MudTd>
        <MudTd DataLabel="Tool used">@context.ToolName</MudTd>
        <MudTd DataLabel="Content type">@context.File.Tag</MudTd>
        <MudTd DataLabel="Size">@context.File.Data.Length</MudTd>
        <MudTd DataLabel="Backed up on">@context.BackedUpOn</MudTd>
        <MudTd DataLabel="Download">
            <MudIconButton OnClick="async () => await DownloadBackup(context)" Color="Color.Secondary" Icon="@Icons.Filled.FileDownload"></MudIconButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<MudProgressLinear Size="Size.Large" Color="Color.Primary" Indeterminate="true" />

@code {
    [Inject] IndexedDBManager indexedDbMgr { get; set; }
    [Inject] IBlazorDownloadFileService downloadService { get; set; }
    [Inject] ILanguageContainerService i18n { get; set; }
    [Inject] ISnackbar SnackBar { get; set; }

    List<IBackupRecord> backupList = new List<IBackupRecord>();
    string searchString = "";

    protected override async Task OnInitializedAsync() {
        i18n.InitLocalizedComponent(this);

        var backups = await indexedDbMgr.GetRecords<BackupRecord>("backups");

        if(backups != null) {
            backupList.AddRange(backups);
        }
    }

    async Task DownloadBackup(IBackupRecord backup) {
        var progress = new Progress<double>();

        progress.ProgressChanged += OnDownloadProgressChanged;

        await downloadService.DownloadFile(backup.File.Name, backup.File.Data, 32786, "application/octet-stream", progress);
    }
    
    void OnDownloadProgressChanged(object sender, double progress) {
        
    }
    
    bool FilterBackups(IBackupRecord record) {
        if(string.IsNullOrWhiteSpace(searchString)) {
            return true;
        }

        if(record.File.Name.ToLower().Contains(searchString)) {
            return true;
        }

        if(record.ToolName.ToLower().Contains(searchString)) {
            return true;
        }

        if(record.File.Tag.ToString().ToLower().Contains(searchString)) {
            return true;
        }

        return false;
    }
}
